{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global module */\n/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","/* global module */\n/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS: 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference is in progress of joining.\n */\nexport const CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {String} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global __filename, RTCRtpScriptTransform */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setVideoMute(mute) {\n        this.sendVideoInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setAudioMute(mute) {\n        this.sendAudioInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendAudioInfoPresence(mute) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling}`);\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","/* global $, $build, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                }\n\n                // Log only the first video ssrc per endpoint.\n                ssrcs.push(videoSources[0]?.s);\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                }\n                ssrcs.push(audioSources[0]?.s);\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                    // the local endpoint is the offerer and starts muted.\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                    const remoteDescription = new RTCSessionDescription({\n                        type: 'offer',\n                        sdp: remoteSdp\n                    });\n\n                    this._responderRenegotiate(remoteDescription);\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            const promise = typeof maxFrameHeight === 'undefined'\n                ? this.peerconnection.configureSenderVideoEncodings()\n                : this.peerconnection.setSenderVideoConstraints(maxFrameHeight);\n\n            return promise;\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                this.peerconnection.removeRemoteTracks(id);\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        if (this.isP2P) {\n                            // Do not remove ssrcs from m-line in p2p mode. If the ssrc is removed and added back to\n                            // the same m-line (on source-add), Chrome/Safari do not render the media even if it is\n                            // being received and decoded from the remote peer. The webrtc spec is not clear about\n                            // m-line re-use and the browser vendors have implemented this differently. Currently work\n                            // around this by changing the media direction, that should be enough for the browser to\n                            // fire the \"removetrack\" event on the associated MediaStream. Also, the current direction\n                            // of the transceiver for p2p will depend on whether a local sources is added or not. It\n                            // will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings();\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings();\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`);\n            logger.debug(remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`);\n            logger.debug(add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(94)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, options.customDomain)}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","\nimport Listenable from '../../modules/util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, 0)\n                });\n            }\n        }\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc)),\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const transceiver = this.findTransceiver(mediaType, oldTrack);\n        const track = newTrack?.getTrack() ?? null;\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        if (webrtcStream) {\n            try {\n                this.tpcUtils.addTrack(track, isInitiator);\n            } catch (error) {\n                logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n                return Promise.reject(error);\n            }\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => this.isP2P);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n        const transceiver = this.tpcUtils.findTransceiver(mediaType, oldTrack);\n\n        return promise\n            .then(() => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                if (transceiver) {\n                    // Set the transceiver direction.\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Renegotiate only in the case of P2P. We rely on 'negotiationeeded' to be fired for JVB.\n                return configureEncodingsPromise.then(() => this.isP2P);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function() {\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localSdp = this._mungeCodecOrder(localSdp);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    // eslint-disable-next-line no-param-reassign\n    description = this._mungeCodecOrder(description);\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    this._senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        const scaleFactor = videoType === VideoType.DESKTOP || localVideoTrack.resolution <= frameHeight\n            ? HD_SCALE_FACTOR\n            : Math.floor(localVideoTrack.resolution / frameHeight);\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTrack();\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                logError(error, 'VideoTypeMessage', this._videoType);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && mediaType === MediaType.AUDIO) {\n                        emitAudioMutedEvent(endpointId, newMutedState);\n                    } else {\n                        emitVideoMutedEvent(endpointId, newMutedState);\n                    }\n                }\n\n                const newVideoType = sourceInfoJSON[sourceName].videoType;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    emitEventsFromHere && emitVideoTypeEvent(endpointId, newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom.getLastPresence(owner);\n\n            if (!lastPresence) {\n                throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n            }\n\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        return this._remoteSourceState[owner] ? this._remoteSourceState[owner][sourceName] : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        if (this.ssrcOwners.has(ssrc)) {\n            logger.error(`SSRC owner re-assigned from ${this.ssrcOwners.get(ssrc)} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n}\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this._signalingLayer.setChatRoom(null);\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    this.rtc.setVideoType(videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrackBelongsToConference) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    let videoTypeChanged = false;\n\n    if (newTrack.isVideoTrack()) {\n        videoTypeChanged = this._setNewVideoType(newTrack);\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (this._setTrackMuteStatus(newTrack, newTrack.isMuted()) || videoTypeChanged) {\n        // send presence if it was changed with vide type or mute status\n        this.room.sendPresence();\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // FIXME once legacy signaling using 'sendCommand' is removed, signalingLayer.setTrackVideoType must be adjusted\n        // to send the presence (not just modify it).\n        this._signalingLayer.setTrackVideoType(\n            getSourceNameForJitsiTrack(\n                this.myUserId(),\n                track.getType(),\n                0\n            ),\n            track.videoType);\n\n        // TODO: Optimize to detect whether presence was changed, for now always report changed to send presence\n        return true;\n    }\n\n    const videoTypeTagName = 'videoType';\n\n    // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n    if (track.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n        // we will not use this.sendCommand here to avoid sending the presence immediately, as later we may also set\n        // and the mute status\n        return this.room.addOrReplaceInPresence(videoTypeTagName, { value: track.videoType });\n    }\n\n    return false;\n};\n\n/**\n * Sets mute status.\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(localTrack, isMuted) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // TODO When legacy signaling part is removed, remember to adjust signalingLayer.setTrackMuteStatus, so that\n        // it triggers sending the presence (it only updates it for now, because the legacy code below sends).\n        this._signalingLayer.setTrackMuteStatus(\n            getSourceNameForJitsiTrack(this.myUserId(), localTrack.getType(), 0),\n            isMuted\n        );\n    }\n\n    if (!this.room) {\n        return false;\n    }\n\n    if (localTrack.isAudioTrack()) {\n        return this.room.addAudioInfoToPresence(isMuted);\n    }\n\n    return this.room.addVideoInfoToPresence(isMuted);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this._getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","/* global __filename */\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init({\n            sourceNameSignaling: options.sourceNameSignaling\n        });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","grammar","v","name","reg","o","names","format","s","i","u","e","p","z","r","t","c","b","push","m","a","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","value","maxMessageSize","RegExp","dir2","clksrcExt","id","mediaClockValue","rateNumerator","rateDenominator","Object","keys","forEach","key","obj","parser","writer","write","parse","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","match","rawName","length","attachProperties","validLine","prototype","test","bind","sdp","session","media","split","filter","l","type","slice","rtp","fmtp","j","paramReducer","acc","expr","undefined","reduce","toString","map","candidates","parts","component","ip","port","item","substring","stream","scid","paused","formatRegExp","formatStr","args","arguments","len","replace","x","arg","makeLine","Function","n","apply","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","options","this","numOfLayers","console","log","ssrcCache","processVideo","action","Array","isArray","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","indexOf","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","Math","floor","random","_restoreSimulcast","numSsrcs","index","array","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","splice","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","previous_async","async","only_once","fn","called","Error","noConflict","_toString","_isArray","call","_each","arr","iterator","_map","results","_keys","k","hasOwnProperty","process","nextTick","setImmediate","setTimeout","each","callback","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","concat","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","result","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","addListener","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","abs","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","data","waterfall","wrapIterator","next","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","queue","worker","concurrency","_insert","q","pos","drain","saturated","workers","empty","kill","shift","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","end","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","error","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","count","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","constructor","userId","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","Date","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","RecordingResult","require","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","track","recorder","startTime","startRecorder","trackRecorder","start","stopRecorder","stop","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","addTrack","isAudioTrack","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","MediaStream","getAudioTracks","mimeType","ondataavailable","dataEvent","size","removeTrack","isVideoTrack","getParticipantId","recorderToRemove","conference","isLocal","getParticipantById","download","blob","Blob","url","URL","createObjectURL","document","createElement","body","appendChild","style","href","click","window","revokeObjectURL","getRecordingResults","getFileType","wordArray","SphinxService","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","audioRecorder","transcriptionService","transcription","state","lineLength","blobCallBack","transcriber","answer","offset","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","send","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","reset","TranscriptionService","sendRequest","response","verify","formatResponse","audioBlob","Word","message","sphinxURL","toReturn","includes","getURL","create","audioFileBlob","request","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","open","setRequestHeader","JSON","objects","filler","json","getWord","getBeginTime","getEndTime","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","EventEmitterForwarder","src","dest","emit","forward","srcEvent","handlers","oldOnErrorHandler","onerror","oldOnUnhandledRejection","onunhandledrejection","handler","event","reason","GlobalOnErrorHandler","addHandler","callErrorHandler","errHandler","callUnhandledRejectionHandler","randomInt","min","max","randomElement","RandomUtil","randomHexDigit","randomHexString","ret","randomAlphanumStr","currentExecutingScript","ScriptUtil","loadScript","prepend","relativeURL","loadCallback","errorCallback","d","tagName","script","referenceNode","getElementsByTagName","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","parentNode","insertBefore","integerHash","string","char","hash","charCodeAt","pow","generateUsername","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","H264","OPUS","VP8","VP9","INACTIVE","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","width","height","IDENTITY_UPDATED","LOCAL_JID","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOIN_IN_PROGRESS","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_RECEIVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","Uint8Array","code","num","output","defineProperty","enumerable","get","Symbol","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","toLowerCase","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","assign","satisfies","isOS","isPlatform","f","isBrowser","compareVersion","substr","isEngine","is","search","versionName","vendor","model","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","stack","skipStackDepth","matches","ignoreMessage","round","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","origin","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","init","once","emitter","Promise","resolve","errorListener","resolver","eventTargetAgnosticAddListener","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","TypeError","_getMaxListeners","_addListener","events","existing","warning","newListener","warned","w","warn","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","copy","addEventListener","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","Logger","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","stringify","someObject","formatLogMessage","msg","ERROR","timestamp","prevMessage","prevMessageText","text","_flush","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","transport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","logger","level","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","versions","node","g","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","has","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","trim","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","params","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","DATA_CHANNEL_OPENED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","devices","gum","constraints","JitsiTrackErrors","constraintName","constraint","video","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","attributes","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","getItem","keyName","setItem","keyValue","removeItem","serialize","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","isSupported","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","supportsUnifiedPlan","supportsVADDetection","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","static","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","duration","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","disconnect","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","participantId","userResolutions","userFramerates","codecDesc","userCodecs","audio","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","stopLocalStats","startCallStats","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","_onIceConnectionFailed","createFocusLeftEvent","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","roomjid","performance","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","_onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","ljm","querySelector","idx","workerBlob","blobUrl","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","lastKey","isEqual","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","minDelay","base","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","service","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","newList","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","_leaveLobbyRoom","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","step","Moderator","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","XMPP","myroomjid","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","deploymentInfo","userRegion","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","user","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_sourceNameSignaling","sourceNameSignaling","isSourceNameSignalingEnabled","_createSourceExtension","owner","sourceCompactJson","$build","FeatureFlags","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","groups","contents","jingle2media","streamCount","setAttribute","__","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","JingleSessionState","doInitialize","addIceCandidates","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","close","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","removeRemoteTracks","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v2Err","v1Res","v1Err","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","endsWith","region","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","sync","p2pStunServers","stunServers","iceTransportPolicy","headersArr","header","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","onclose","jsonObject","DEFAULT_CONSTRAINTS","ideal","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","getVideoTracks","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","pcConstraints","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","_getUserMedia","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","cameraDeviceId","facingMode","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","trackId","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","getSettings","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","unmute","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setTrackMuteStatus","_setConference","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLine","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","localStreamEncodingsConfig","scaleResolutionDownBy","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","getTransceivers","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","sendEncodings","addTransceiver","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","transceiver","setEncodings","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","getRemoteTracks","remoteTrackIds","getReceivers","getSynchronizationSources","tracks","getLocalVideoTrack","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","existingTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedTracks","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","getSenders","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","sdpSemantics","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","SendVideoController","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","_getActiveMediaSession","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","ComponentsVersions","addCommandListener","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","setTrackMuteStatus","setTrackVideoType","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","receiveVideoController","sendVideoController","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","_fireMuteChangeEvent","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeChanged","_setNewVideoType","videoTypeTagName","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","metadata","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","JitsiMeetJS","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","nodeValue","copyElement","_i","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","removeAttribute","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","F","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","nonce","Hi","U","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","firstChild","startString","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","val","compactObject","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","commonShim","browserShim","adapterFactory","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}